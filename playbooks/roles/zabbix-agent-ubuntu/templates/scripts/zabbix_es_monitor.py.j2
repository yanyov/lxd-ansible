#!/usr/bin/env python

# Created by Aaron Mildenstein on 19 SEP 2012
# Switchted from pyes to Elasticsearch for better Health Monitoring by Marcel Alburg on 17 JUN 2014
# completly rewriten by Nickolay Kolev

from elasticsearch import Elasticsearch

import sys
import socket

# Define the fail message
def zbx_fail():
    print "ZBX_NOTSUPPORTED"
    sys.exit(2)

clusterhealthkeys = ["cluster_name", "status", "timed_out", "number_of_nodes", "number_of_data_nodes", "active_primary_shards", "active_shards", "relocating_shards", "initializing_shards", "unassigned_shards", "delayed_unassigned_shards", "number_of_pending_tasks", "number_of_in_flight_fetch", "task_max_waiting_in_queue_millis", "active_shards_percent_as_number"]


returnval = None

# __main__

# We need to have two command-line args:
# sys.argv[1]: The node name or "cluster"
# sys.argv[2]: The "key" (status, filter_size_in_bytes, etc)

if len(sys.argv) < 3:
    zbx_fail()

# Try to establish a connection to elasticsearch
try:
    hostname = socket.gethostname()
    conn = Elasticsearch("{hostname}:9200".format(hostname=hostname), sniff_on_start=False)
    #hostname = "localhost"
    #conn = Elasticsearch("{hostname}:19200".format(hostname=hostname), sniff_on_start=False)
except Exception, e:

    zbx_fail()

#flattern nested hash to enable direct reference witj composed key
def flatten_dict(d):
    def items():
        for key, value in d.items():
            if isinstance(value, dict):
                for subkey, subvalue in flatten_dict(value).items():
                    yield key + "." + subkey, subvalue
            else:
                yield key, value

    return dict(items())


if sys.argv[1] == 'cluster':

    if sys.argv[2] == 'status':
        # If the key is "status" then we need to map that to an integer
        try:
            returnval = conn.cluster.health()['status']
        except Exception, e:
            zbx_fail()

        if returnval == 'green':
            returnval = 0
        elif returnval == 'yellow':
            returnval = 1
        elif returnval == 'red':
            returnval = 2
        else:
            zbx_fail()


    elif sys.argv[2] in clusterhealthkeys:
        # Try to get a value to match the key provided
        returnval = conn.cluster.health()[sys.argv[2]]

    else:
        # try to match composite key by looking in depth
        clusterstats = conn.cluster.stats()
        stats = flatten_dict(clusterstats)
        if sys.argv[2] in stats:
            returnval = stats[sys.argv[2]]

# Mod to check if ES service is up
elif sys.argv[1] == 'service':
    if sys.argv[2] == 'status':
        try:
            conn.cluster.stats()
            returnval = 1
        except Exception, e:
            returnval = 0

else: # Not clusterwide, check the next arg
    try:
        nodestats = conn.nodes.stats(sys.argv[1])
        if len(nodestats[u'nodes'].keys()) > 0:
            nodehash = nodestats[u'nodes'].keys()[0]

            stats = flatten_dict(nodestats)
            key = "nodes.{nodehash}.{keyparam}".format(nodehash=nodehash, keyparam=sys.argv[2])
            if key in stats:
                returnval = stats[key]
    except Exception, e:
        pass

# If we somehow did not get a value here, that's a problem.  Send back the standard
# ZBX_NOTSUPPORTED
if returnval is None:
    zbx_fail()
else:
    print returnval

# End
